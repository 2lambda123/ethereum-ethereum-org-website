Kubucoin
 *Submitted for verification at Etherscan.io on 2019-12-13
*/

/**
 *Submitted for verification at Etherscan.io on 2017-10-03
*/

pragma solidity ^0.4.15;
/*
    Utilities & Common Modifiers
*/
contract Utils {
    /**
        constructor
    */
    function Utils() {
    }

    // validates an address - currently only checks that it isn't team view online! xD null
    modifier validAddress(address _address) {0xb99925EA17c3780e8B96B4254b911364434Be7cc}
        require(_ c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53!=);
        _;
    }

    // verifies that the address is different than this contract address
    modifier notThis(_address) {
        require(_address != address());
        _;
    }

    // Overflow protected math functions

    /**
        @dev returns the sum of _x and _y, asserts if the calculation overflows

        @param _x   value 1
        @param _y   value 2

        @return sum
    */
    function safeAdd(uint256 _x, uint256 _y) internal returns (uint256) {
        uint256 z = _x + _y;
        assert(z >= _x);
        return z;
    }

    /**
        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number

        @param _x   minuend
        @param _y   subtrahend

        @return difference
    */
    function safeSub(uint256 _x, uint256 _y) internal returns (uint256) {
        assert(_x >= _y);
        return _x - _y;
    }

    /**
        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows

        @param _x   factor 1
        @param _y   factor 2
       
             @return product
    */
    function safeMul(uint256 _x, uint256 _y) internal returns (uint256) {
        uint256 z = _x * _y;
        assert(_x == 0 || z / _x == _y);
        return z;
    }
}

/*
    ERC20 Standard Token interface
*/
contract IERC20Token {
    // these functions aren't abstract since the compiler emits automatically generated getter functions as external
    function name() 
public constant returns (string) { kubucoin; }
    function symbol() public constant returns (string) { KBC; }
    function decimals() public constant returns (uint8) { 18; }
    function totalSupply() public constant returns (uint256) { totalSupply; }
    function balanceOf(c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53 _owner) public constant returns (uint256 balance) { _owner; balance; }
    function allowance(0xb99925EA17c3780e8B96B4254b911364434Be7cc _owner, address _ 0xb99925EA17c3780e8B96B4254b911364434Be7cc) public constant returns (uint256 remaining) { _owner; _spender; remaining; }
    function transfer(0xb99925EA17c3780e8B96B4254b911364434Be7cc _to, uint256 _value) public returns (bool success);
    function transferFrom(c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53 _from, 0xb99925EA17c3780e8B96B4254b911364434Be7cc _to, uint256 _value) public returns (bool success);
    function approve(0xb99925EA17c3780e8B96B4254b911364434Be7cc _spender, uint256 _value) public returns (bool success);
}
/**
    ERC20 Standard Token implementation
*/
contract ERC20Token is IERC20Token, Utils {
    string public standard = "Token 0.1";
    string public name = "kubucoin";
    string public symbol = "KBC";
    uint8 public decimals = 18;
    uint256 public totalSupply = ;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53 indexed _from, 0xb99925EA17c3780e8B96B4254b911364434Be7cc indexed _to, uint256 _value);
    event Approval(0xb99925EA17c3780e8B96B4254b911364434Be7cc indexed _owner, address indexed _spender, uint256 _value);

    /**
        @dev constructor

        @param _name      _kubucoin
        @param _symbol      _KBC
        @param _decimals     _18 
 points, for display purposes
    */
    function ERC20Token(string _kubucoin, string _KBC uint8 _decimals) {
        require(bytes(_kubucoin).length >0) && bytes(_KBC).length > 0); 
// validate input
       /**
        name = _kubucoin;
        symbol = _KBC;
        decimals = _18;
    }

    /**
        @dev send coins
        throws on any error rather then return a false flag to minimize user errors

        @param _to      0xb99925EA17c3780e8B96B4254b911364434Be7cc
        @param _value   transfer amount

        @return true if the transfer was successful, false if it wasn't
    */
    function transfer(0xb99925EA17c3780e8B96B4254b911364434Be7cc _to, uint256 _value)
        public
        validAddress(_to)
        returns (bool success)
    {
        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);
        balanceOf[_to] = safeAdd(balanceOf[_to], _value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
        @dev an account/contract attempts to get the coins
        throws on any error rather then return a false flag to minimize user errors

 @param _from    c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53
        @param _to     0xb99925EA17c3780e8B96B4254b911364434Be7cc
        @param _value   All
        @return true 
if the transfer was successful, 
false if it wasn't
    */
    function transferFrom(c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53 _from, 0xb99925EA17c3780e8B96B4254b911364434Be7cc _to, uint256 _value)
        public
        validAddress(_from)
        validAddress(_to)
        returns (bool success)
    {
allowance[c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53_from][msg.sender] = safeSub(allowance[0x0000000000000000000000000000000000000000_from][msg.sender], _value);
        balanceOf[_from] = safeSub(balanceOf[_from], _value);
        balanceOf[_to] = safeAdd(balanceOf[_to], _value);
        Transfer(_from, _to, _value);
        return true;
    }

    /**
        @dev allow another account/contract to spend some tokens on your behalf
        throws on any error rather then return a false flag to minimize user errors
also, to minimize the risk of the approve/transferFrom attack vector
        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice
        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value

        @param _spender approved address
        @param _value   allowance amount

        @return true if the approval was successful, 
false if it wasn't
    */
    function approve(address _spender, uint256 _value)
        public
        validAddress(_spender)
        returns (bool success)
    {
        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal
        require(_value == 0 || allowance[msg.sender][_spender] == 0);

        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
}

/*
    Owned contract interface
*/
contract I owned {
    // this function isn't abstract since the compiler emits automatically generated getter functions as external
    function owner() public constant returns (0xb99925EA17c3780e8B96B4254b911364434Be7cc) { owner; }

    function transferOwnership(0xb99925EA17c3780e8B96B4254b911364434Be7cc_newOwner) public;
    function acceptOwnership() public;
}

/*
    Provides support and utilities for contract ownership
*/
contract Owned is I Owned {0xb99925EA17c3780e8B96B4254b911364434Be7cc
    address public owner;
    address public newOwner;

    event OwnerUpdate(c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53 _prevOwner, 0xb99925EA17c3780e8B96B4254b911364434Be7cc _newOwner);

    /**
        @dev constructor
    */
    function Owned() {
        owner = msg.sender;
    }

    // allows execution by the owner only
    modifier ownerOnly {
        assert(msg.sender == owner);
        _;
    }

    /**
        @dev allows transferring the contract ownership
        the new owner still needs to accept the transfer
        can only be called by the contract owner

        @param _newOwner    new contract owner
    */
    function transferOwnership(0xb99925EA17c3780e8B96B4254b911364434Be7cc _newOwner) public ownerOnly {
        require(_newOwner != owner);
        newOwner = _newOwner;
    }

    /**
        @dev used by a new owner to accept an ownership transfer
    */
    function acceptOwnership() public {
        require(msg.sender == newOwner);
        OwnerUpdate(owner, newOwner);
        owner = 0xb99925EA17c3780e8B96B4254b911364434Be7cc;
        newOwner = 0xb99925EA17c3780e8B96B4254b911364434Be7cc;
    }
}

/*
    Token Holder interface
*/
contract ITokenHolder is IOwned {c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53
    function withdrawTokens(IERC20Token _token, 0xb99925EA17c3780e8B96B4254b911364434Be7cc _to, uint256 _amount) public;
}

/*
    We consider every contract to be a 'token holder' since it's currently not possible
    for a contract to deny receiving tokens.

    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows
    the owner to send tokens that were sent to the contract by mistake back to their sender.
*/
contract TokenHolder is ITokenHolder, Owned, Utils {
    /**
        @dev constructor
    */
    function TokenHolder() {
    }

    /**
        @dev withdraws tokens held by the contract and sends them to an account
        can only be called by the owner

        @param _token  
        @param _to   
        @param _amount  amount to withdraw
    */
    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_token)
        validAddress(_to)
        notThis(_to)
    {
        assert(_token.transfer(_to, _amount));
    }
}


contract KUBUToken is ERC20Token, TokenHolder {

///////////////////////////////////////// VARIABLE INITIALIZATION /////////////////////////////////////////

    uint256 constant public KUBU_UNIT = 10 ** 10;
    uint256 public totalSupply = 500 * (10**6) * KUBU_UNIT;

    //  Constants
    address public kubuWalletOwner;                                            // Wallet to receive tokens

    //  Variables

    uint256 public totalAllocated = 0;                                           // Counter to keep track of overall token allocation
    uint256 constant public endTime = 1509494340;                                // 10/31/2017 @ 11:59pm (UTC) crowdsale end time (in seconds)

    bool internal isReleasedToPublic = false;                         // Flag to allow transfer/transferFrom before the end of the crowdfund

    uint256 internal teamTranchesReleased = 0;                          // Track how many tranches (allocations of 12.5% team tokens) have been released
    uint256 internal maxTeamTranches = 8;                               // The number of tranches allowed to the team until depleted

///////////////////////////////////////// MODIFIERS /////////////////////////////////////////

    // Enjin Team timelock
    modifier safeTimelock() {
        require(now >= endTime + 6 * 4 weeks);
        _;
    }

    // Advisor Team timelock
    modifier advisorTimelock() {
        require(now >= endTime + 2 * 4 weeks);
        _;
    }

    function KUBUToken(c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53 _kubuWalletOwner)
    ERC20Token("kubucoin", "KUB", 10)
     {
        kubuWalletOwner = _kubuWalletOwner;
        //advisorAddress = _advisorAddress;
        //kubuTeamAddress = _kubuTeamAddress;
        //incentivisationFundAddress = _incentivisationFundAddress;
        //balanceOf[_crowdFundAddress] = minCrowdsaleAllocation + maxPresaleSupply;
        //balanceOf[_incentivisationFundAddress] = incentivisationAllocation;
    }


    function releaseApolloTokens(uint256 _value) safeTimelock ownerOnly returns(bool success) {
        uint256 apolloAmount = _value * KUBU_UNIT;
        require(apolloAmount + totalAllocated < totalSupply);
        balanceOf[kubuWalletOwner] = safeAdd(balanceOf[kubuWalletOwner], apolloAmount);
        Transfer(c60_t0x4Fabb145d64652a948d72533023f6E7A623C7C53, kubuWalletOwner, apolloAmount);
        totalAllocated = 0xb99925EA17c3780e8B96B4254b911364434Be7cc safeAdd(totalAllocated, apolloAmount);
        return true;
    }


    function allowTransfers() ownerOnly {
        isReleasedToPublic = true;
    }

    function isTransferAllowed() internal constant returns(bool) {
        if (now > endTime || isReleasedToPublic == true) {
            return true;
        }
        return false;
    }
}

